{"version":3,"sources":["components/LoadingSpinner.js","components/Quotes.js","App.js","reportWebVitals.js","index.js","components/Quotes.module.css","components/LoadingSpinner.module.css"],"names":["LoadingSpinner","className","classes","Quotes","useState","quotes","setQuotes","isLoading","setIsLoading","getQuotes","a","fetch","response","json","data","randQuote","Math","floor","random","length","console","error","useEffect","text","card","author","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"qRAgBeA,EAbQ,WACtB,OACC,qBAAKC,UAAWC,IAAQ,iBAAxB,SACC,sBAAKD,UAAWC,IAAQ,gBAAxB,UACC,wBACA,wBACA,wBACA,8B,gBCyCWC,EA/CA,WACd,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAS,uCAAG,gCAAAC,EAAA,6DACjBF,GAAa,GADI,kBAGOG,MAAM,+BAHb,cAGVC,EAHU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAKVC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QAClDb,EAAUQ,EAAKC,IANC,kDAQhBK,QAAQC,MAAR,MACAb,GAAa,GATG,QAWjBA,GAAa,GAXI,0DAAH,qDAmBf,OANAc,qBAAU,WACTb,MACE,IAIEJ,EAAOkB,KASLhB,EACN,qBAAKN,UAAWC,IAAQsB,KAAxB,SACC,cAAC,EAAD,MAGD,sBAAKvB,UAAWC,IAAQsB,KAAxB,UACC,gCACC,mBAAGvB,UAAWC,IAAQqB,KAAtB,SAA6BlB,EAAOkB,OACpC,oBAAGtB,UAAWC,IAAQuB,OAAtB,eAAiCpB,EAAOoB,aAEzC,wBAAQC,QAASjB,EAAjB,8BAjBA,sBAAKR,UAAWC,IAAQsB,KAAxB,UACC,qDACA,wBAAQE,QAASjB,EAAjB,+BClBWkB,MAVf,WACC,OACC,qBAAK1B,UAAU,MAAf,SACC,wBAAQA,UAAU,aAAlB,SACC,cAAC,EAAD,SCKW2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,KAAO,qBAAqB,KAAO,qBAAqB,OAAS,yB,kBCAnFD,EAAOC,QAAU,CAAC,gBAAgB,sCAAsC,eAAe,qCAAqC,YAAY,qC","file":"static/js/main.d4b435ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './LoadingSpinner.module.css';\r\n\r\nconst LoadingSpinner = () => {\r\n\treturn (\r\n\t\t<div className={classes['place-spinner']}>\r\n\t\t\t<div className={classes['ring-spinner']}>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React, { useState, useEffect } from 'react';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport classes from './Quotes.module.css';\r\n\r\nconst Quotes = () => {\r\n\tconst [quotes, setQuotes] = useState({});\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst getQuotes = async () => {\r\n\t\tsetIsLoading(true);\r\n\t\ttry {\r\n\t\t\tconst response = await fetch('https://type.fit/api/quotes');\r\n\t\t\tconst data = await response.json();\r\n\t\t\tconst randQuote = Math.floor(Math.random() * data.length);\r\n\t\t\tsetQuotes(data[randQuote]);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t\tsetIsLoading(true);\r\n\t\t}\r\n\t\tsetIsLoading(false);\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tgetQuotes();\r\n\t}, []);\r\n\r\n\t// console.log(quotes);\r\n\r\n\tif (!quotes.text) {\r\n\t\treturn (\r\n\t\t\t<div className={classes.card}>\r\n\t\t\t\t<h1>no quotes available</h1>\r\n\t\t\t\t<button onClick={getQuotes}>Get new quote</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn isLoading ? (\r\n\t\t<div className={classes.card}>\r\n\t\t\t<LoadingSpinner />\r\n\t\t</div>\r\n\t) : (\r\n\t\t<div className={classes.card}>\r\n\t\t\t<div>\r\n\t\t\t\t<p className={classes.text}>{quotes.text}</p>\r\n\t\t\t\t<p className={classes.author}>- {quotes.author}</p>\r\n\t\t\t</div>\r\n\t\t\t<button onClick={getQuotes}>Get new quote</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Quotes;\r\n","import './App.css';\nimport Quotes from './components/Quotes';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<header className='App-header'>\n\t\t\t\t<Quotes />\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Quotes_card__1ELPS\",\"text\":\"Quotes_text__xmHsO\",\"author\":\"Quotes_author__3v2d7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"place-spinner\":\"LoadingSpinner_place-spinner__S0KF4\",\"ring-spinner\":\"LoadingSpinner_ring-spinner__1nWz0\",\"ring-spin\":\"LoadingSpinner_ring-spin__2FthP\"};"],"sourceRoot":""}